package fsd.model.user;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Transient;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonIgnore;

import org.hibernate.annotations.GenericGenerator;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@NoArgsConstructor
@EntityListeners(AuditingEntityListener.class) // automaticlly complete created time and updated time
public class User implements UserDetails {

    /**
     * serialVersionUID
     */
    private static final long serialVersionUID = -4502295024082617429L;

    /**
     * Constructor
     * 
     * @param username
     * @param password
     * @param roleNameArray
     */
    public User(String username, String password, String[] roleNameArray) {
        this.username = username;
        this.password = password;
        this.roleNameArray = roleNameArray;
    }

    /**
     * User id which is generated by database
     */
    @Id
    @Column(name = "ID")
    // @GeneratedValue(strategy = GenerationType.IDENTITY) // auto increase
    // @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "userSeq")
    // @SequenceGenerator(name = "userSeq", sequenceName = "BUYER_SEQ",
    // allocationSize = 1)
    @GenericGenerator(name = "idGenerator", strategy = "uuid")
    @GeneratedValue(generator = "idGenerator")
    private String id;

    /**
     * Login User name
     */
    @Column(name = "USERNAME", unique = true, length = 30)
    @NotNull
    private String username;

    /**
     * Password
     * <p>
     * encrpted by BCryptPasswordEncoder
     * </p>
     */
    @Column(name = "PASSWORD")
    @NotNull
    @JsonIgnore // Ignore this field when generate to Json
    private String password;

    // @Column(length = 200)
    // @JsonIgnore
    // private String salt;

    /**
     * Email address
     */
    @Column(name = "EMAIL")
    @NotBlank
    @JsonIgnore
    private String email;

    /**
     * Expired date
     */
    @Column(name = "EXPIRE_DATE")
    @JsonIgnore
    private Date exiredDate;

    /**
     * User enable flag
     * <ul>
     * <li>0: Normal
     * <li>1: User is locked
     * <li>2: User is disabled
     * </ul>
     */
    @Column(name = "STATUS")
    @NotNull
    @JsonIgnore
    private Integer status;

    /**
     * Created time
     */
    @CreatedDate
    private Date created;

    /**
     * Updated time
     */
    @LastModifiedDate
    private Date updated;

    /**
     * Many-To-Many mapping user and role
     */
    @ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE, }, fetch = FetchType.EAGER)
    @JoinTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    @JsonIgnore
    private List<Role> roleList = new ArrayList<>();

    /**
     * Store the role names from Filter
     */
    @Transient
    @JsonIgnore
    private String[] roleNameArray;

    private Collection<? extends GrantedAuthority> convertRoles(String[] rolesArray) {
        Collection<? extends GrantedAuthority> roles = Stream.of(rolesArray).map(s -> new SimpleGrantedAuthority(s))
                .collect(Collectors.toList());
        return roles;
    }

    /**
     * Returns the authorities granted to the user. Cannot return <code>null</code>.
     *
     * @return the authorities, sorted by natural key (never <code>null</code>)
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {

        List<String> roleNameArray = this.roleList.stream().map(role -> role.getName()).collect(Collectors.toList());

        return convertRoles(roleNameArray.toArray(new String[0]));
    }

    @Override
    public boolean isAccountNonExpired() {
        // always non expired
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return this.status != UserStatus.Locked.getStatus();
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return exiredDate.after(new Date());
    }

    @Override
    public boolean isEnabled() {
        return this.status == UserStatus.Normal.getStatus() && isCredentialsNonExpired();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        User that = (User) o;
        return Objects.equals(id, that.id) && Objects.equals(username, that.username)
                && Objects.equals(password, that.password) && Objects.equals(email, that.email)
                && Objects.equals(exiredDate, that.exiredDate) && Objects.equals(status, that.status)
                && Objects.equals(created, that.created) && Objects.equals(updated, that.updated)
                && Objects.deepEquals(roleList, that.roleList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, username, password, email, exiredDate, status, created, updated, roleList);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("User {").append("id = '").append(id).append("'").append("username = '").append(username).append("'")
                .append("password = '").append(password).append("'").append("email = '").append(email).append("'")
                .append("exiredDate = '").append(exiredDate).append("'").append("status = '").append(status).append("'")
                .append("created = '").append(created).append("'").append("updated = '").append(updated).append("'")
                .append("roleList = [").append(roleList).append("]")
                .append("}");
        return sb.toString();
    }
}