package fsd.common.model.auth;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.UserDetails;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
public class FsdUserDetail implements UserDetails {

	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = -4502295024082617429L;

	/**
	 * Constructor
	 * 
	 * @param username
	 * @param password
	 * @param roleNameArray
	 */
	public FsdUserDetail(String userType, String userId, String username, String password, String[] roleNameArray) {
		this.userType = userType;
		this.userId = userId;
		this.username = username;
		this.password = password;
		this.authorities = AuthorityUtils.createAuthorityList(roleNameArray);
		// Stream.of(roleNameArray.toArray(new String[0])).map(s -> new
		// SimpleGrantedAuthority(s))
		// .collect(Collectors.toList());
	}

	/**
	 * User type
	 */
	private String userType;

	/**
	 * User id which is generated by database
	 */
	private String userId;

	/**
	 * Login User name
	 */
	private String username;

	/**
	 * Password
	 * <p>
	 * encrpted by BCryptPasswordEncoder
	 * </p>
	 */
	private String password;

	/**
	 * Expired date
	 */
	private Date exiredDate = new Date();

	/**
	 * User status to illustrate whether is normal or locked
	 */
	private Integer status = UserStatus.Normal.getStatus();

	/**
	 * Many-To-Many mapping user and role
	 */
	private Collection<? extends GrantedAuthority> authorities = new ArrayList<>();

	/**
	 * Returns the authorities granted to the user. Cannot return <code>null</code>.
	 *
	 * @return the authorities, sorted by natural key (never <code>null</code>)
	 */
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {

		return authorities;
	}

	@Override
	public boolean isAccountNonExpired() {
		// always non expired
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return this.status != UserStatus.Locked.getStatus();
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return exiredDate.after(new Date());
	}

	@Override
	public boolean isEnabled() {
		return this.status == UserStatus.Normal.getStatus() && isCredentialsNonExpired();
	}
}